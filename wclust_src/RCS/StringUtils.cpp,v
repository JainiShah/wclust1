head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2008.06.13.15.35.16;	author samn;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.01.06.06.51;	author samn;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.10.19.05.40;	author samn;	state Exp;
branches;
next	;


desc
@""
@


1.3
log
@added version of split that takes char*, resize vector in split to 0 before adding anything to it
@
text
@// $Id: StringUtils.cpp,v 1.2 2008/04/01 06:06:51 samn Exp $ 
#include "stdafx.h"
#include "StringUtils.h"

using namespace std;

//remove newlines from end of str
bool Chop(char* str)
{
	int iLen = strlen(str);
	if(iLen)
	{
		if(str[iLen-1]=='\n' || str[iLen-1]=='\r')
		{
			str[iLen-1]=0;
			Chop(str); //in case \r\n
			return true;
		}
	}
	return false;
}

//split string based on chars in strDelim and return tokens in vstr
void Split(string& str,string& strDelim,vector<string>& vstr)
{
	vstr.resize(0);
	char* cStr = new char[str.length()+1];
	strcpy(cStr,str.c_str());

	char* token = strtok( cStr, strDelim.c_str() );
	while( token != NULL )
	{
		vstr.push_back(string(token));
		token = strtok( NULL, strDelim.c_str() );
	}
	delete [] cStr;
}

//split string based on chars in strDelim and return tokens in vstr
void Split(char* cStr,string& strDelim,vector<string>& vstr)
{
	vstr.resize(0);
	char* token = strtok( cStr, strDelim.c_str() );
	while( token != NULL )
	{
		vstr.push_back(string(token));
		token = strtok( NULL, strDelim.c_str() );
	}
}

void StripQuotes(string& str)
{
	string strTmp;
	int iSz = str.size(), i = 0;
	for(;i<iSz;i++)
		if(str[i]!='\"')
			strTmp+=str[i];
	str=strTmp;
}

@


1.2
log
@added StripQuotes
@
text
@d1 1
a1 1
// $Id$ 
d26 1
d39 12
@


1.1
log
@Initial revision
@
text
@d1 47
a47 37
// $Id$ 
#include "stdafx.h"
#include "StringUtils.h"

using namespace std;

//remove newlines from end of str
bool Chop(char* str)
{
	int iLen = strlen(str);
	if(iLen)
	{
		if(str[iLen-1]=='\n' || str[iLen-1]=='\r')
		{
			str[iLen-1]=0;
			Chop(str); //in case \r\n
			return true;
		}
	}
	return false;
}

//split string based on chars in strDelim and return tokens in vstr
void Split(string& str,string& strDelim,vector<string>& vstr)
{
	char* cStr = new char[str.length()+1];
	strcpy(cStr,str.c_str());

	char* token = strtok( cStr, strDelim.c_str() );
	while( token != NULL )
	{
		vstr.push_back(string(token));
		token = strtok( NULL, strDelim.c_str() );
	}
	delete [] cStr;
}

@
