head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2008.08.11.20.49.36;	author samn;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.06.02.25.07;	author samn;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.22.21.34.08;	author samn;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.10.03.39.25;	author samn;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.19.15.09.23;	author samn;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.06.19.48.53;	author samn;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.02.21.21.25;	author samn;	state Exp;
branches;
next	;


desc
@""
@


1.7
log
@added write2logplain
@
text
@// $Id: Log.cpp,v 1.6 2008/05/06 02:25:07 samn Exp $ 
#include "stdafx.h"
#include <time.h>
#include <string>
#include <io.h>
#include "Log.h"
#include "MyVers.h"

using namespace std;

string GetDateTime(time_t t)
{
  struct tm	*date;		/* Date/time value */
  static time_t	last_time = -1;	/* Last time value */
  static char	s[1024];	/* Date/time string */
  static const char * const months[12] =
		{		/* Months */
		  "Jan",
		  "Feb",
		  "Mar",
		  "Apr",
		  "May",
		  "Jun",
		  "Jul",
		  "Aug",
		  "Sep",
		  "Oct",
		  "Nov",
		  "Dec"
		};


  if (t != last_time)
  {
    last_time = t;
  
    date = localtime(&t);

    sprintf(s,  "%02d/%s/%04d:%02d:%02d:%02d",
	     date->tm_mday, months[date->tm_mon], 1900 + date->tm_year,
	     date->tm_hour, date->tm_min, date->tm_sec);
  }

  return string(s);
}

bool Write2LogPlain(const char* cstr,...)
{
	try
	{
		static CString strVers = GetWClustVersionString();
		const char* fname = "wclust_.log";
		FILE* fp = fopen(fname,"a+");
		if(!fp)
		{	MessageBox(0,"Couldn't write to wclust_.log!!!","WClust - error!",MB_ICONERROR);
			int iRet = _access("wclust_.log",02);
			if(iRet==0) MessageBox(0,"Have access to write","Wclust",MB_ICONINFORMATION);
			else  MessageBox(0,"Don't have access to write wclust_.log ! ! !","Wclust",MB_ICONERROR);
			return false;
		}

		va_list ap;

		static char line[32768]={0};

		va_start(ap, cstr);
		vsprintf(line, cstr, ap);
		va_end(ap);

		fprintf(fp,"%s",line);

		fclose(fp);

		return true;
	}
	catch(...)
	{	MessageBox(0,"Exception in Write2Log!!!","Wclust - error",MB_ICONERROR);
		return false;
	}
}

bool Write2Log(const char* cstr,...)
{
	try
	{
		static CString strVers = GetWClustVersionString();
		const char* fname = "wclust_.log";
		FILE* fp = fopen(fname,"a+");
		if(!fp)
		{	MessageBox(0,"Couldn't write to wclust_.log!!!","WClust - error!",MB_ICONERROR);
			int iRet = _access("wclust_.log",02);
			if(iRet==0) MessageBox(0,"Have access to write","Wclust",MB_ICONINFORMATION);
			else  MessageBox(0,"Don't have access to write wclust_.log ! ! !","Wclust",MB_ICONERROR);
			return false;
		}

		va_list ap;

		static char line[32768]={0};

		va_start(ap, cstr);
		vsprintf(line, cstr, ap);
		va_end(ap);

		fprintf(fp,"[%s V%s]: %s\n",GetDateTime(time(0)).c_str(),strVers,line);

		fclose(fp);

		return true;
	}
	catch(...)
	{	MessageBox(0,"Exception in Write2Log!!!","Wclust - error",MB_ICONERROR);
		return false;
	}
}

bool WriteVec2Log(vector<float>& v)
{
	try
	{
		CString str("\n"),tmp;
		int iSz = v.size() , i;
		tmp.Format("vsz=%d\n",iSz);
		str+=tmp;
		for(i=0;i<iSz;i++)
		{
			tmp.Format("%.4f\t",v[i]);
			str += tmp;
		}
		return Write2Log(str);
	}
	catch(...)
	{
		return false;
	}
}

bool WriteVec2Log(vector<double>& v)
{
	try
	{
		std::string str("\n");
		CString tmp;
		int iSz = v.size() , i;
		tmp.Format("vsz=%d\n",iSz);
		str+=tmp;
		Write2Log(str.c_str());

		const char* fname = "wclust_.log";
		FILE* fp = fopen(fname,"a+");
		if(!fp)
			return false;

		for(i=0;i<iSz;i++)
			fprintf(fp,"%.4f\t",v[i]);
		fprintf(fp,"\n");

		fclose(fp);
		
		return true;
	}
	catch(...)
	{	try{Write2Log("Exception in WriteVec2Log!");}catch(...){}
		return false;
	}
}

bool WriteMat2Log(vector<vector<float> >& m)
{
	try
	{
		CString str("\n"),tmp;
		int iRows = m.size(), iCols = m[0].size() , i, j;
		tmp.Format("%d X %d\n",iRows,iCols);
		str+=tmp;
		for(i=0;i<iRows;i++)
		{	
			for(j=0;j<iCols;j++)
			{
				tmp.Format("%.4f\t",m[i][j]);
				str += tmp;
			}
			str += "\n";
		}
		return Write2Log(str);
	}
	catch(...)
	{
		return false;
	}
}

bool WriteMat2Log(A2D<float>& m)
{
	try
	{
		CString str("\n"),tmp;
		int iRows = m.Rows(), iCols = m.Cols() , i, j;
		tmp.Format("%d X %d\n",iRows,iCols);
		str+=tmp;
		for(i=0;i<iRows;i++)
		{	
			for(j=0;j<iCols;j++)
			{
				tmp.Format("%.4f\t",m[i][j]);
				str += tmp;
			}
			str += "\n";
		}
		return Write2Log(str);
	}
	catch(...)
	{
		return false;
	}
}

bool WriteMat2Log(A2D<int>& m)
{
	try
	{
		CString str("\n"),tmp;
		int iRows = m.Rows(), iCols = m.Cols() , i, j;
		tmp.Format("%d X %d\n",iRows,iCols);
		str+=tmp;
		for(i=0;i<iRows;i++)
		{	
			for(j=0;j<iCols;j++)
			{
				tmp.Format("%d\t",m[i][j]);
				str += tmp;
			}
			str += "\n";
		}
		return Write2Log(str);
	}
	catch(...)
	{
		return false;
	}
}


bool WriteMat2Log(vector<vector<double> >& m)
{
	try
	{
		CString str("\n"),tmp;
		int iRows = m.size(), iCols = m[0].size() , i, j;
		tmp.Format("%d X %d\n",iRows,iCols);
		str+=tmp;
		for(i=0;i<iRows;i++)
		{	
			for(j=0;j<iCols;j++)
			{
				tmp.Format("%.4f\t",m[i][j]);
				str += tmp;
			}
			str += "\n";
		}
		return Write2Log(str);
	}
	catch(...)
	{
		return false;
	}
}

bool WriteVec2Log(vector<int>& v)
{
	try
	{
		std::string str("\n");
		CString tmp;
		int iSz = v.size() , i;
		tmp.Format("vsz=%d\n",iSz);
		str+=tmp;
		Write2Log(str.c_str());

		const char* fname = "wclust_.log";
		FILE* fp = fopen(fname,"a+");
		if(!fp)
			return false;

		for(i=0;i<iSz;i++)
			fprintf(fp,"%d\t",v[i]);
		fprintf(fp,"\n");

		fclose(fp);
		
		return true;
	}
	catch(...)
	{	try{Write2Log("Exception in WriteVec2Log!");}catch(...){}
		return false;
	}
}
@


1.6
log
@added int version of writevec2log
@
text
@d1 1
a1 1
// $Id: Log.cpp,v 1.5 2008/04/22 21:34:08 samn Exp $ 
d47 35
@


1.5
log
@added 2 new versions of WriteMat2Log for A2D
@
text
@d1 1
a1 1
// $Id: Log.cpp,v 1.4 2008/04/10 03:39:25 samn Exp $ 
d233 30
@


1.4
log
@added version to log
@
text
@d1 1
a1 1
// $Id: Log.cpp,v 1.3 2008/03/19 15:09:23 samn Exp $ 
d158 51
@


1.3
log
@added funcs for writing vectors,matrices to log file
@
text
@d1 1
a1 1
// $Id: Log.cpp,v 1.2 2008/03/06 19:48:53 samn Exp $ 
d7 1
d39 1
a39 1
    sprintf(s,  "[%02d/%s/%04d:%02d:%02d:%02d %+03ld%02ld]",
d41 1
a41 2
	     date->tm_hour, date->tm_min, date->tm_sec,
             timezone / 3600, (timezone / 60) % 60);
d51 1
d64 1
a64 1
		static char line[16384]={0};
d70 1
a70 1
		fprintf(fp,"%s: %s\n",GetDateTime(time(0)).c_str(),line);
@


1.2
log
@messagebox on problems in logging
@
text
@d1 180
a180 79
// $Id: Log.cpp,v 1.1 2008/02/02 21:21:25 samn Exp $ 
#include "stdafx.h"
#include <time.h>
#include <string>
#include <io.h>
#include "Log.h"

using namespace std;

string GetDateTime(time_t t)
{
  struct tm	*date;		/* Date/time value */
  static time_t	last_time = -1;	/* Last time value */
  static char	s[1024];	/* Date/time string */
  static const char * const months[12] =
		{		/* Months */
		  "Jan",
		  "Feb",
		  "Mar",
		  "Apr",
		  "May",
		  "Jun",
		  "Jul",
		  "Aug",
		  "Sep",
		  "Oct",
		  "Nov",
		  "Dec"
		};


  if (t != last_time)
  {
    last_time = t;
  
    date = localtime(&t);

    sprintf(s,  "[%02d/%s/%04d:%02d:%02d:%02d %+03ld%02ld]",
	     date->tm_mday, months[date->tm_mon], 1900 + date->tm_year,
	     date->tm_hour, date->tm_min, date->tm_sec,
             timezone / 3600, (timezone / 60) % 60);
  }

  return string(s);
}

bool Write2Log(const char* cstr,...)
{
	try
	{
		const char* fname = "wclust_.log";
		FILE* fp = fopen(fname,"a+");
		if(!fp)
		{	MessageBox(0,"Couldn't write to wclust_.log!!!","WClust - error!",MB_ICONERROR);
			int iRet = _access("wclust_.log",02);
			if(iRet==0) MessageBox(0,"Have access to write","Wclust",MB_ICONINFORMATION);
			else  MessageBox(0,"Don't have access to write wclust_.log ! ! !","Wclust",MB_ICONERROR);
			return false;
		}

		va_list ap;

		static char line[16384]={0};

		va_start(ap, cstr);
		vsprintf(line, cstr, ap);
		va_end(ap);

		fprintf(fp,"%s: %s\n",GetDateTime(time(0)).c_str(),line);

		fclose(fp);

		return true;
	}
	catch(...)
	{	MessageBox(0,"Exception in Write2Log!!!","Wclust - error",MB_ICONERROR);
		return false;
	}
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $Id$ 
d5 1
d53 7
a59 1
		if(!fp) return false;
d76 1
a76 1
	{
@
