head	1.24;
access;
symbols;
locks; strict;
comment	@// @;


1.24
date	2009.06.26.15.56.59;	author samn;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.25.04.04.00;	author samn;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.27.20.24.18;	author samn;	state Exp;
branches;
next	1.21;

1.21
date	2008.09.16.01.39.53;	author samn;	state Exp;
branches;
next	1.20;

1.20
date	2008.08.28.04.07.18;	author samn;	state Exp;
branches;
next	1.19;

1.19
date	2008.08.11.20.46.12;	author samn;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.24.18.46.41;	author samn;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.10.03.28.05;	author samn;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.16.18.23.18;	author samn;	state Exp;
branches;
next	1.15;

1.15
date	2008.04.25.05.01.15;	author samn;	state Exp;
branches;
next	1.14;

1.14
date	2008.04.24.23.42.44;	author samn;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.24.05.26.28;	author samn;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.22.21.28.30;	author samn;	state Exp;
branches;
next	1.11;

1.11
date	2008.04.11.22.26.14;	author samn;	state Exp;
branches;
next	1.10;

1.10
date	2008.04.10.03.41.45;	author samn;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.30.02.11.52;	author samn;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.19.15.08.40;	author samn;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.17.22.14.07;	author samn;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.16.21.25.31;	author samn;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.02.21.25.12;	author samn;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.02.02.49.18;	author samn;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.10.19.08.03;	author samn;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.10.00.45.39;	author samn;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.05.15.01.00;	author samn;	state Exp;
branches;
next	;


desc
@""
@


1.24
log
@dont switch mode to CLUST_USER automatically when getting info string
@
text
@// $Id: Hist.cpp,v 1.23 2009/06/25 04:04:00 samn Exp $ 
#include "stdafx.h"
#include "Hist.h"
#include "PPM.h"

using namespace std;

Hist::Hist(void)
:m_dMin(0.0),
 m_dMax(0.0),
 m_iBins(0)
{
}

Hist::Hist(hprob dMin,hprob dMax,int iBins)
{
	Init(dMin,dMax,iBins);
}

Hist::~Hist(void)
{
}

bool Hist::Init(hprob dMin,hprob dMax,int iBins)
{
	if(iBins < 1 || dMin > dMax)
	{
		return false;
	}

	m_dMin = dMin;
	m_dMax = dMax;
	m_dRange = m_dMax - m_dMin;
	m_iBins = iBins;
	m_dNumElems = 0.0;

	m_counts = vector<int>(iBins);

	return true;
}

bool RandAssign(CVerxStack& DataStack,CCluster& MainClusters,int iClusts,int which)
{
	srand(time(0));
	MY_STACK::iterator Index;	
	for (Index=DataStack.m_VerxStack.begin();Index!=DataStack.m_VerxStack.end();Index++)
	{	
		CVertex* verx = (CVertex*)*Index;

		//skip noise
		if(verx->GetNoise()) continue;

		switch(which)
		{
		case CLUST_KM:
			verx->SetKmeansClust(1+rand()%iClusts);
			break;
		case CLUST_INFO:
			verx->SetInfoClust(1+rand()%iClusts);
			break;
		case CLUST_AP:
			verx->SetAPClust(1+rand()%iClusts);
			break;
		case CLUST_KK:
			verx->SetKKClust(1+rand()%iClusts);
			break;
		case CLUST_FL:
			verx->SetFLClust(1+rand()%iClusts);
			break;
		}
	}
	return true;
}

void FillDistribs(CVerxStack& DataStack,CCluster& MainClusters,int iBins,std::vector< std::vector<Hist> >& vDistribs,int iDistribs,int which)
{
	//distrib for each cluster + 1 for full distrib
	vDistribs = std::vector< std::vector<Hist> >(iDistribs+1);
	int iDims = DataStack.GetAutoClusteringDimension();
	
	int iD=0,iC=1; 
	for(iC=1;iC<=iDistribs;iC++)
	{
		vDistribs[iC] = std::vector<Hist>(iDims);
		for(iD=0;iD<iDims;iD++)
		{	//make sure to do +1 for dimension indices in DataStack
			vDistribs[iC][iD].Init(DataStack.GetMin(iD+1),DataStack.GetMax(iD+1),iBins);
		}
	}
	
	//go through clusters
	//each cluster checks ALL spikes for membership
	//inefficient...but is there a better way without changing the data structures?
	
	MY_STACK::iterator Index;	
	for (Index=DataStack.m_VerxStack.begin();Index!=DataStack.m_VerxStack.end();Index++)
	{	
		CVertex* verx = (CVertex*)*Index;

		//skip noise
		if(verx->GetNoise()) continue;
			
		//go through clusters filling out distrib info
		for(iC=1;iC<=iDistribs;iC++)
		{
			//either spike is in cluster or it is the FULL distribution
			//containing all spikes!!
			if(iC==iDistribs || GetVClust(verx,which)==iC)
			{
				for(iD=0;iD<iDims;iD++)
				{	//+1 since index 0 is # of clusters vertex is in
					vDistribs[iC][iD].IncBinVal(verx->GetValue(iD+1));
				}
			}
		}
	}
}

void FillDistribs(CVerxStack& DataStack,int** pBinData,CCluster& MainClusters,int iBins,std::vector< std::vector<Hist> >& vDistribs,int iDistribs,vector<int>& vClustIDs,int iMinClust)
{
	//distrib for each cluster + 1 for full distrib
	vDistribs = std::vector< std::vector<Hist> >(iDistribs+1);
	int iDims = DataStack.GetAutoClusteringDimension();
	
	int iD=0,iC=1; 
	//for(iC=1;iC<=iDistribs;iC++)
	for(iC=iMinClust;iC<=iDistribs;iC++) // **************** //
	{
		vDistribs[iC] = std::vector<Hist>(iDims);
		for(iD=0;iD<iDims;iD++)
		{	//make sure to do +1 for dimension indices in DataStack
			vDistribs[iC][iD].Init(DataStack.GetMin(iD+1),DataStack.GetMax(iD+1),iBins);
		}
	}
	
	int iV = 0;
	for(iV=0;iV<vClustIDs.size();iV++)
	{	
		if(vClustIDs[iV]==0)continue;
		for(iD=0;iD<iDims;iD++)
		{
			//cluster spike belongs to
			vDistribs[vClustIDs[iV]][iD].IncBin(pBinData[iV][iD]);

			//FULL distribution containing all spikes!!
			vDistribs[iDistribs][iD].IncBin(pBinData[iV][iD]);
		}
	}
}

void GetFullBGDistrib(vector<float>& vFloat,KDTreeHist& oTree,int iDims,int* pBestDims,int iBestDims)
{
	int i = 0, j = 0 , iV = 0 , iTotalVs = vFloat.size() / iDims;
	vector<float> vFullData(iTotalVs*iBestDims);
	for(iV=0;iV<iTotalVs;iV++)
	{	for(i=0;i<iBestDims;i++)
			vFullData[j++]=vFloat[iV*iDims+pBestDims[i]];
	}
	oTree.SetData(iBestDims,&vFullData[0],iTotalVs);
}

//this is the continuous multidimensional probability version
void FillDistribs(vector<float>& vFloat,vector<KDTreeHist>& vDistribs,vector<KDTreeHist>& vCompDistribs,int iDistribs,vector<int>& vClustIDs,vector<int>& vCounts,int iDims,A2D<int>& vBestDims,int iBestDims)
{
	vDistribs = vector< KDTreeHist >(iDistribs+1);
	vCompDistribs = vector< KDTreeHist >(iDistribs+1);

	int iTotalVs = vFloat.size() / iDims, iC = 0;

	//full distribution not really used so no need to initialize!!!!!

	for(iC=1;iC<iDistribs;iC++)
	{	int iCompSize = iTotalVs - vCounts[iC];
		vector<float> vClustData(vCounts[iC]*iBestDims), vCompData(iCompSize*iBestDims);
		int i = 0, j = 0 , k = 0, iV = 0;
		for(iV=0;iV<vClustIDs.size();iV++)
		{	if(vClustIDs[iV] == iC)
			{	for(i=0;i<iBestDims;i++)
					vClustData[j++]=vFloat[iV*iDims+vBestDims[iC][i]];
			}
			else 
			{	for(i=0;i<iBestDims;i++)
					vCompData[k++]=vFloat[iV*iDims+vBestDims[iC][i]];
			}
		}
		vDistribs[iC].SetData(iBestDims,&vClustData[0],vCounts[iC]);
		vCompDistribs[iC].SetData(iBestDims,&vCompData[0],iCompSize);
	}
}

bool Distribs2Matlab(vector< vector< Hist > >& vDistribs, char* fname_base)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	int iDims = vDistribs[1].size();

	int iC=1,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	for(iC=1;iC<iClusts;iC++)
	{
		char fname[1024];
		sprintf(fname,"%d_bins__clust%d__%s___.txt",iBins,iC,fname_base);
		FILE* fp = fopen(fname,"w");
		if(!fp) return false;
		int xpos = 0,ypos = 0;
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
				fprintf(fp,"%lf " ,vDistribs[iC][iD].BinProb(iB));
			fprintf(fp,"\n");
		}
		fclose(fp);
	}

	return true;
}

bool Distribs2Images(vector< vector< Hist > >& vDistribs, char* fname_base)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	int iDims = vDistribs[1].size();

	int iC=1,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	int iMaxCount = 0;
	for(iC=1;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<vDistribs[iC][iD].NumBins();iB++)
			{
				if(vDistribs[iC][iD][iB] > iMaxCount)
				{
					iMaxCount = vDistribs[iC][iD][iB];
				}
			}
		}
	}

	int iInterDim = 20 , iBinWidth = 10;
	int iH = 600;
	int iW = iBinWidth * iBins * iDims + iInterDim * iDims;

	prob_t dScale = (iH - 1) * (1.0 / iMaxCount);

	color red(255,0,0) , green(0,255,0), blue(0,0,255), black(0,0,0), white(255,255,255);

	for(iC=1;iC<iClusts;iC++)
	{
		ppmImage oImg( iW, iH);
		oImg.setWhite();
		char fname[1024];
		sprintf(fname,"%s_%d_.ppm",fname_base,iC);
		int xpos = 0,ypos = 0;
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
			{
				int xmin = xpos;
				int xmax = xpos + iBinWidth;
				int ymin = iH - 1;
				int ymax = (iH - 1) - ( vDistribs[iC][iD][iB] / iMaxCount) * (iH - 1);

				int x,y;
				for(y=ymax;y<=ymin;y++)
					for(x=xmin;x<xmax;x++)
						oImg[y][x] = red;

				xpos += iBinWidth;
			}
			xpos += iInterDim;
		}
		oImg >> fname;
	}

	return true;
}

bool PrintDistribs2(vector< vector< Hist> >& vDistribs, char* fname)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	FILE* fp = fopen(fname,"w");

	if(!fp) return false;

	int iDims = vDistribs[0].size();

	int iC=0,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	int iMaxCount = 0;
	for(iC=0;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<vDistribs[iC][iD].NumBins();iB++)
			{
				if(vDistribs[iC][iD][iB] > iMaxCount)
				{
					iMaxCount = vDistribs[iC][iD][iB];
				}
			}
		}
	}

	vector< vector<char> > varr((iDims+1) * iBins);

	for(iC=0;iC<varr.size();iC++)
	{
		varr[iC].resize(iMaxCount);
		for(iD=0;iD<iMaxCount;iD++)
		{
			varr[iC][iD]='_';
		}
	}

	for(iC=0;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
			{
				int k;
				for(k=0;k<vDistribs[iC][iD][iB];k++)
				{
					if(varr[iD][iB]=='_')
					{
						varr[iD][iB]=iC;
					}
				}
			}
		}
	}

	for(iD=0;iD<iDims;iD++)
	{
		fprintf(fp,"D%d\n",iD);
		for(iB=0;iB<iBins;iB++)
		{
			int k;
			for(k=0;k<iMaxCount;k++)
			{
				fprintf(fp,"%c",varr[iD][iB]);
			}			
		}
		//fprint
	}

	fclose(fp);

	return true;
}

bool PrintDistribs(vector<vector< Hist> >& vDistribs,char* fname)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	FILE* fp = fopen(fname,"w");
	
	if(!fp) return false;

	int iDims = vDistribs[0].size();

	int iC = 0, iD = 0;

	for(iC=0;iC<iClusts;iC++)
	{
		fprintf(fp,"C%d\n",iC);
		for(iD=0;iD<iDims;iD++)
		{
			fprintf(fp,"D%d\n",iD);
			vDistribs[iC][iD].Print(fp);
		}
		fprintf(fp,"\n");
	}

	fclose(fp);

	return true;
}

#define giBins 4
int pBins[giBins] = {10,20,30,40};//,50,60,70,80,90,100};

CString GetClusterInfoString(CVerxStack& MainDataStack,CCluster& MainClusters,HWND wnd,int DrawMode)
{
	//this func NOT ONLY called on user data when saving .cl file
	MainDataStack.whichDraw = DrawMode;

	CString strInfo,strTmp;

	//calculate cluster info gain for each cluster
	if(MainClusters.CalcClusterInfo(MainDataStack,true,wnd))
	{	//create info gain string for
		//multidimensional continuous probability distribution information gain
		//using resistor average of KL-divergence between points in a cluster and
		//all other points as background distribution -- 
		//also resistor avg. of inter-cluster KL-divergence for each cluster and corresponding closets
		//cluster ID, iff not using inter clust kldiv, these values will be 0
		CString strInfo( "%%BEGIN CLUSTER_INFORMATION_GAIN\n// %%InformationGain.0 ( ClusterId TotalKLDiv BGKLDiv InterKLDiv ClosestClusterID ");
		CString strTmp;
		strTmp.Format("%dNNCC SilhouetteWidth NumLoadedSpikes )\n",MainClusters.m_oCQO.m_iNNToFind);
		strInfo += strTmp;
		unsigned int iC=0;
		const int which = DrawMode;
		//go through all clusters (last one is FULL distribution so doesn't need to be saved to string)
		for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vInfo[which].size();iC++)
		{	CString strTmp;
			strTmp.Format("%%InformationGain.0 ( %d ",iC);
			strInfo += strTmp;
			strTmp.Format("%.2f %.2f %.2f %d %.6f %.4f %d",
				MainClusters.m_vInfo[which][iC].m_fBGInfoGain+MainClusters.m_vInfo[which][iC].m_fInterClustGain,
				MainClusters.m_vInfo[which][iC].m_fBGInfoGain,
				MainClusters.m_vInfo[which][iC].m_fInterClustGain,
				MainClusters.m_vInfo[which][iC].m_iClosestID,
				MainClusters.m_vInfo[which][iC].m_fPrctKNNInClust,
				MainClusters.m_vInfo[which][iC].m_fSilhouetteWidth,
				MainClusters.m_vInfo[which][iC].m_iSz);
			strInfo += strTmp;
			strInfo += " )\n";
		}
		strInfo += "%%END CLUSTER_INFORMATION_GAIN\n\n";
		{	//store dimension info
			if(!MainClusters.m_oCQO.m_bFindBestDims) MainDataStack.CalcDimStats();
			strInfo += 	"\n%%BEGIN KLDIV_DIMENSION_INFO\n// %%KLDivDimInfo.0 ( ClusterId DimRank(1=best) DimID DimEntropy DimMean DimStdev DimMin DimMax DimRange DimName )\n";
			A2D<int>& vBestDims = MainClusters.m_vBestDims;
			int iD = 0, iC , iBestDims = MainClusters.m_oCQO.m_iBestDims;
			MY_STR_STACK& vAxes = MainDataStack.m_AxesStack;
			vector<float>& Entropy = MainDataStack.m_MainEntropy;
			vector<float>& Mean = MainDataStack.m_MainMean;
			vector<float>& Stdev = MainDataStack.m_MainStdev;
			vector<float>& VMin = MainDataStack.m_MainMin;
			vector<float>& VMax = MainDataStack.m_MainMax;
			vector<float>& VRange = MainDataStack.m_MainRange;

			//ClusterId DimRank(1=best) DimID DimEntropy DimMean DimStdev DimMin DimMax DimRange DimName
			if(MainClusters.m_oCQO.m_bFindBestDims) for(iC=1;iC<vBestDims.Rows();iC++)
			{	for(iD=0;iD<vBestDims.Cols();iD++)
				{	strTmp.Format("%%KLDivDimInfo.0 ( %d %d %d %.2f %.2f %.2f %.2f %.2f %.2f %s )\n",
						iC,iBestDims-iD,vBestDims[iC][iD],Entropy[vBestDims[iC][iD]+1],
						Mean[vBestDims[iC][iD]+1],Stdev[vBestDims[iC][iD]+1],VMin[vBestDims[iC][iD]+1],
						VMax[vBestDims[iC][iD]+1],VRange[vBestDims[iC][iD]+1],*vAxes[vBestDims[iC][iD]]);
					strInfo += strTmp;
				}
			}
			for(iD=1;iD<=MainDataStack.GetAutoClusteringDimension();iD++)//store all dim info
			{	strTmp.Format("%%KLDivDimInfo.0 ( 0 -1 %d %.2f %.2f %.2f %.2f %.2f %.2f %s )\n",
					iD-1,Entropy[iD],Mean[iD],Stdev[iD],VMin[iD],VMax[iD],VRange[iD],*vAxes[iD-1]);
				strInfo += strTmp;
			}
			strInfo+="%%END KLDIV_DIMENSION_INFO\n\n";
		}
	}
	if(MainClusters.m_oCQO.m_bIsolationDist)
	{	strInfo += "%%BEGIN CLUSTER_ISOLATION_DISTANCE\n// %%IsolationDistance.0 ( ClusterId IsolationDist )\n";
		unsigned int iC=0;
		const int which = CLUST_USER;
		//go through all clusters (last one is FULL distribution so doesn't need to be saved to string)
		for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vInfo[which].size();iC++)
		{	CString strTmp;
			strTmp.Format("%%IsolationDistance.0 ( %d ",iC);
			strInfo += strTmp;
			strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC].m_dIsolationDist); //isolation distance
			strInfo += strTmp;
			strInfo += " )\n";
		}
		strInfo += "%%END CLUSTER_ISOLATION_DISTANCE\n\n";
	}

	if(MainClusters.m_oCQO.m_bLRatio)
	{	strInfo += "%%BEGIN CLUSTER_L_RATIO\n// %%LRatio.0 ( ClusterId LRatio )\n";
		unsigned int iC=0;
		const int which = CLUST_USER;
		//go through all clusters (last one is FULL distribution so doesn't need to be saved to string)
		for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vInfo[which].size();iC++)
		{	CString strTmp;
			strTmp.Format("%%LRatio.0 ( %d ",iC);
			strInfo += strTmp;
			strTmp.Format("%g ",MainClusters.m_vInfo[which][iC].m_dLRatio); //L-Ratio
			strInfo += strTmp;
			strInfo += " )\n";
		}
		strInfo += "%%END CLUSTER_L_RATIO\n\n";
	}
	
	return strInfo;
}

static vector< vector<float> > gvprobs;
void InitProbs(int iMaxNumElems)
{
	if(gvprobs.size()>=iMaxNumElems+1)return;
	gvprobs = vector< vector<float> >(iMaxNumElems+1);
	int i,j;
	gvprobs[0] = vector<prob_t>(1);
	gvprobs[0][0] = 0.0;
	for(i=1;i<=iMaxNumElems;i++)
	{
		gvprobs[i] = vector<prob_t>(i+1);
		for(j=0;j<=i;j++)
		{
			gvprobs[i][j] = (prob_t) j / (prob_t) i;
		}
	}
}

float Prob(int iElems,int i)
{
	if(iElems >= gvprobs.size() || i >= gvprobs[iElems].size())
		return (float) i / (float) iElems;
	return gvprobs[iElems][i];
}

ProbInitFree::ProbInitFree(int i)
{
	InitProbs(i);
}

ProbInitFree::~ProbInitFree()
{
	gvprobs.clear();
}
@


1.23
log
@allow saving cluster quality to .cl files even if not in user mode
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.22 2008/11/27 20:24:18 samn Exp $ 
d402 1
a402 1
	//this func only called on user data when saving .cl file
d405 1
a405 10
	//create info gain string for
	//multidimensional continuous probability distribution information gain
	//using resistor average of KL-divergence between points in a cluster and
	//all other points as background distribution -- 
	//also resistor avg. of inter-cluster KL-divergence for each cluster and corresponding closets
	//cluster ID, iff not using inter clust kldiv, these values will be 0
	CString strInfo( "%%BEGIN CLUSTER_INFORMATION_GAIN\n// %%InformationGain.0 ( ClusterId TotalKLDiv BGKLDiv InterKLDiv ClosestClusterID ");
	CString strTmp;
	strTmp.Format("%dNNCC SilhouetteWidth NumLoadedSpikes )\n",MainClusters.m_oCQO.m_iNNToFind);
	strInfo += strTmp;
d409 10
a418 1
	{
d420 1
a420 1
		const int which = CLUST_USER;
d437 27
a463 24
	}

	strInfo += "%%END CLUSTER_INFORMATION_GAIN\n\n";

	{	//store dimension info
		if(!MainClusters.m_oCQO.m_bFindBestDims) MainDataStack.CalcDimStats();
		strInfo += 	"\n%%BEGIN KLDIV_DIMENSION_INFO\n// %%KLDivDimInfo.0 ( ClusterId DimRank(1=best) DimID DimEntropy DimMean DimStdev DimMin DimMax DimRange DimName )\n";
		A2D<int>& vBestDims = MainClusters.m_vBestDims;
		int iD = 0, iC , iBestDims = MainClusters.m_oCQO.m_iBestDims;
		MY_STR_STACK& vAxes = MainDataStack.m_AxesStack;
		vector<float>& Entropy = MainDataStack.m_MainEntropy;
		vector<float>& Mean = MainDataStack.m_MainMean;
		vector<float>& Stdev = MainDataStack.m_MainStdev;
		vector<float>& VMin = MainDataStack.m_MainMin;
		vector<float>& VMax = MainDataStack.m_MainMax;
		vector<float>& VRange = MainDataStack.m_MainRange;

		//ClusterId DimRank(1=best) DimID DimEntropy DimMean DimStdev DimMin DimMax DimRange DimName
		if(MainClusters.m_oCQO.m_bFindBestDims) for(iC=1;iC<vBestDims.Rows();iC++)
		{	for(iD=0;iD<vBestDims.Cols();iD++)
			{	strTmp.Format("%%KLDivDimInfo.0 ( %d %d %d %.2f %.2f %.2f %.2f %.2f %.2f %s )\n",
					iC,iBestDims-iD,vBestDims[iC][iD],Entropy[vBestDims[iC][iD]+1],
					Mean[vBestDims[iC][iD]+1],Stdev[vBestDims[iC][iD]+1],VMin[vBestDims[iC][iD]+1],
					VMax[vBestDims[iC][iD]+1],VRange[vBestDims[iC][iD]+1],*vAxes[vBestDims[iC][iD]]);
d466 1
a467 6
		for(iD=1;iD<=MainDataStack.GetAutoClusteringDimension();iD++)//store all dim info
		{	strTmp.Format("%%KLDivDimInfo.0 ( 0 -1 %d %.2f %.2f %.2f %.2f %.2f %.2f %s )\n",
				iD-1,Entropy[iD],Mean[iD],Stdev[iD],VMin[iD],VMax[iD],VRange[iD],*vAxes[iD-1]);
			strInfo += strTmp;
		}
		strInfo+="%%END KLDIV_DIMENSION_INFO\n\n";
a468 1

@


1.22
log
@added flame clust
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.21 2008/09/16 01:39:53 samn Exp $ 
d400 1
a400 1
CString GetClusterInfoString(CVerxStack& MainDataStack,CCluster& MainClusters,HWND wnd)
d403 1
a403 1
	MainDataStack.whichDraw = CLUST_USER;
@


1.21
log
@allow filling distrib 0, off by def.
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.20 2008/08/28 04:07:18 samn Exp $ 
d67 3
@


1.20
log
@use C that maximizes iso-i(bg,inter) when determining # of clusters for entropy reduction clustering
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.19 2008/08/11 20:46:12 samn Exp $ 
d15 1
a15 1
Hist::Hist(prob_t dMin,prob_t dMax,int iBins)
d24 1
a24 1
bool Hist::Init(prob_t dMin,prob_t dMax,int iBins)
d116 1
a116 1
void FillDistribs(CVerxStack& DataStack,int** pBinData,CCluster& MainClusters,int iBins,std::vector< std::vector<Hist> >& vDistribs,int iDistribs,vector<int>& vClustIDs)
d123 2
a124 1
	for(iC=1;iC<=iDistribs;iC++)
d136 1
@


1.19
log
@added GetFullBGDistrib
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.18 2008/07/24 18:46:41 samn Exp $ 
d408 1
a408 1
	strTmp.Format("%dNNCC SilhouetteWidth NumLoadedSpikes )\n",MainClusters.m_iNNToFind);
d437 1
a437 1
		if(!MainClusters.m_bFindBestDims) MainDataStack.CalcDimStats();
d440 1
a440 1
		int iD = 0, iC , iBestDims = MainClusters.m_iBestDims;
d450 1
a450 1
		if(MainClusters.m_bFindBestDims) for(iC=1;iC<vBestDims.Rows();iC++)
d467 1
a467 1
	if(MainClusters.m_bIsolationDist)
d483 1
a483 1
	if(MainClusters.m_bLRatio)
@


1.18
log
@don't setup lookup tables in Prob automatically
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.17 2008/07/10 03:28:05 samn Exp $ 
d146 11
d163 1
a163 2
	//full distribution -- not really used so no need to initialize!!!!!
	vDistribs[iDistribs].SetData(iDims,&vFloat[0],vFloat.size()/iDims);
d165 1
a165 1
	int iTotalVs = vFloat.size() / iDims, iC = 0;
@


1.17
log
@added LRatio to output .cl file
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.16 2008/05/16 18:23:18 samn Exp $ 
d509 1
d513 1
a513 7
	{
		InitProbs(iElems);
		if(iElems >= gvprobs.size() || i >= gvprobs[iElems].size())
		{
			return (float) i / (float) iElems;
		}
	}
@


1.16
log
@added stats on dimensions to output .cl file
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.15 2008/04/25 05:01:15 samn Exp $ 
d458 1
a458 2
	{
		strInfo += "%%BEGIN CLUSTER_ISOLATION_DISTANCE\n// %%IsolationDistance.0 ( ClusterId IsolationDist )\n";
d462 1
a462 1
		for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vIsolationDist[which].size();iC++)
d466 1
a466 1
			strTmp.Format("%.2f ",MainClusters.m_vIsolationDist[which][iC][0]); //isolation distance
d472 16
@


1.15
log
@updated format for .cl output files
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.14 2008/04/24 23:42:44 samn Exp $ 
d426 3
a428 3
	if(MainClusters.m_bFindBestDims)
	{
		strInfo += 	"\n%%BEGIN KLDIV_DIMENSION_INFO\n// %%KLDivDimInfo.0 ( ClusterId DimRank(1=best) DimID DimName )\n";
d432 9
a440 2
		bool b1D = MainClusters.m_b1DBest;
		for(iC=1;iC<vBestDims.Rows();iC++)
d442 4
a445 2
			{	strTmp.Format("%%KLDivDimInfo.0 ( %d %d %d %s )\n",
					iC,iBestDims-iD,vBestDims[iC][iD],*vAxes[vBestDims[iC][iD]]);
d449 5
@


1.14
log
@added # of spikes for each cluster to output cl file
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.13 2008/04/24 05:26:28 samn Exp $ 
d428 1
a428 3
		strInfo += 	"\n%%BEGIN KLDIV_DIMENSION_INFO\n// %%KLDivDimInfo.0 ( ClusterId NumBestDims ";
		strTmp.Format("NameX%d 1DKLDivValX%d )\n",MainClusters.m_iBestDims,MainClusters.m_iBestDims);
		strInfo += strTmp;
d430 1
a430 2
		A2D<prob_t>& v1DKLDivs = MainClusters.m_v1DKLDivs;
		int iD = 0, iC;
d432 1
d434 3
a436 4
		{	strTmp.Format("%%KLDivDimInfo.0 ( %d %d ",iC,MainClusters.m_iBestDims); strInfo += strTmp;
			for(iD=0;iD<vBestDims.Cols();iD++)
			{
				strTmp.Format("%s ",*vAxes[vBestDims[iC][iD]]); 
a438 6
			for(iD=0;iD<v1DKLDivs.Cols();iD++)
			{
				strTmp.Format("%.4f ",v1DKLDivs[iC][iD]); 
				strInfo += strTmp;
			}
			strInfo += " )\n";
@


1.13
log
@added silhouette width
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.12 2008/04/22 21:28:30 samn Exp $ 
d398 1
a398 1
	strTmp.Format("%dNNCC SilhouetteWidth )\n",MainClusters.m_iNNToFind);
d411 1
a411 1
			strTmp.Format("%.2f %.2f %.2f %d %.6f %.4f",
d417 2
a418 1
				MainClusters.m_vInfo[which][iC].m_fSilhouetteWidth);
@


1.12
log
@added filldistribs and info string to take into account use of X best dimensions when computing kldiv
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.11 2008/04/11 22:26:14 samn Exp $ 
d398 1
a398 1
	strTmp.Format("%dNNCC )\n",MainClusters.m_iNNToFind);
d411 1
a411 1
			strTmp.Format("%.2f %.2f %.2f %d %.6f",
d416 2
a417 1
				MainClusters.m_vInfo[which][iC].m_fPrctKNNInClust);
@


1.11
log
@added prct knn into .cl output file if using fast mode of kldiv
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.10 2008/04/10 03:41:45 samn Exp $ 
d146 30
d424 26
@


1.10
log
@save diff types of KLDIV (BG , INTER ,etc. ) to .cl output file
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.9 2008/03/30 02:11:52 samn Exp $ 
d366 5
a370 2
	CString strInfo( "%%BEGIN CLUSTER_INFORMATION_GAIN\n// %%InformationGain.0 ( ClusterId TotalKLDiv BGKLDiv InterKLDiv ClosestClusterID )\n");
	
d381 1
a381 1
			strTmp.Format("%.2f %.2f %.2f %d",
d385 2
a386 1
				MainClusters.m_vInfo[which][iC].m_iClosestID);
@


1.9
log
@make sure correct header string in .cl output file when inter-clust kldiv on
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.8 2008/03/19 15:08:40 samn Exp $ 
d363 4
a366 7
	//all other points as background distribution -- iff MainClusters.m_bInterKLD == true then
	//add minimal resistor avg. of inter-cluster KL-divergence for each cluster
	CString strInfo( "%%BEGIN CLUSTER_INFORMATION_GAIN\n// %%InformationGain.0 ( ClusterId");
	if(MainClusters.m_bInterKLD)
		strInfo += " InfoRKLD_W_INT )\n";
	else
		strInfo += " InfoRKLD )\n";
d378 5
a382 1
			strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][0]); //unweighted kldiv
@


1.8
log
@added isolation dist to output .cl info string
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.7 2008/03/17 22:14:07 samn Exp $ 
d367 1
a367 1
		strInfo += "InfoRKLD )\n";
d369 1
a369 1
		strInfo += "InfoRKLD_W_INT )\n";
@


1.7
log
@added option (default) to compute inter-cluster kldiv and add that to cluster vs background kldiv, v69, when writing kldiv info string to .cl output file, write InfoRKLD_W_INT when computing inter-cluster kldiv
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.6 2008/03/16 21:25:31 samn Exp $ 
a385 2
	else
		MessageBox(0,"Didn't calculate cluster info gain!","WClust - error",MB_ICONINFORMATION);
d388 17
@


1.6
log
@added a comment
@
text
@d1 432
a432 427
// $Id: Hist.cpp,v 1.5 2008/02/02 21:25:12 samn Exp $ 
#include "stdafx.h"
#include "Hist.h"
#include "PPM.h"

using namespace std;

Hist::Hist(void)
:m_dMin(0.0),
 m_dMax(0.0),
 m_iBins(0)
{
}

Hist::Hist(prob_t dMin,prob_t dMax,int iBins)
{
	Init(dMin,dMax,iBins);
}

Hist::~Hist(void)
{
}

bool Hist::Init(prob_t dMin,prob_t dMax,int iBins)
{
	if(iBins < 1 || dMin > dMax)
	{
		return false;
	}

	m_dMin = dMin;
	m_dMax = dMax;
	m_dRange = m_dMax - m_dMin;
	m_iBins = iBins;
	m_dNumElems = 0.0;

	m_counts = vector<int>(iBins);

	return true;
}

bool RandAssign(CVerxStack& DataStack,CCluster& MainClusters,int iClusts,int which)
{
	srand(time(0));
	MY_STACK::iterator Index;	
	for (Index=DataStack.m_VerxStack.begin();Index!=DataStack.m_VerxStack.end();Index++)
	{	
		CVertex* verx = (CVertex*)*Index;

		//skip noise
		if(verx->GetNoise()) continue;

		switch(which)
		{
		case CLUST_KM:
			verx->SetKmeansClust(1+rand()%iClusts);
			break;
		case CLUST_INFO:
			verx->SetInfoClust(1+rand()%iClusts);
			break;
		case CLUST_AP:
			verx->SetAPClust(1+rand()%iClusts);
			break;
		case CLUST_KK:
			verx->SetKKClust(1+rand()%iClusts);
			break;
		}
	}
	return true;
}

void FillDistribs(CVerxStack& DataStack,CCluster& MainClusters,int iBins,std::vector< std::vector<Hist> >& vDistribs,int iDistribs,int which)
{
	//distrib for each cluster + 1 for full distrib
	vDistribs = std::vector< std::vector<Hist> >(iDistribs+1);
	int iDims = DataStack.GetAutoClusteringDimension();
	
	int iD=0,iC=1; 
	for(iC=1;iC<=iDistribs;iC++)
	{
		vDistribs[iC] = std::vector<Hist>(iDims);
		for(iD=0;iD<iDims;iD++)
		{	//make sure to do +1 for dimension indices in DataStack
			vDistribs[iC][iD].Init(DataStack.GetMin(iD+1),DataStack.GetMax(iD+1),iBins);
		}
	}
	
	//go through clusters
	//each cluster checks ALL spikes for membership
	//inefficient...but is there a better way without changing the data structures?
	
	MY_STACK::iterator Index;	
	for (Index=DataStack.m_VerxStack.begin();Index!=DataStack.m_VerxStack.end();Index++)
	{	
		CVertex* verx = (CVertex*)*Index;

		//skip noise
		if(verx->GetNoise()) continue;
			
		//go through clusters filling out distrib info
		for(iC=1;iC<=iDistribs;iC++)
		{
			//either spike is in cluster or it is the FULL distribution
			//containing all spikes!!
			if(iC==iDistribs || GetVClust(verx,which)==iC)
			{
				for(iD=0;iD<iDims;iD++)
				{	//+1 since index 0 is # of clusters vertex is in
					vDistribs[iC][iD].IncBinVal(verx->GetValue(iD+1));
				}
			}
		}
	}
}

void FillDistribs(CVerxStack& DataStack,int** pBinData,CCluster& MainClusters,int iBins,std::vector< std::vector<Hist> >& vDistribs,int iDistribs,vector<int>& vClustIDs)
{
	//distrib for each cluster + 1 for full distrib
	vDistribs = std::vector< std::vector<Hist> >(iDistribs+1);
	int iDims = DataStack.GetAutoClusteringDimension();
	
	int iD=0,iC=1; 
	for(iC=1;iC<=iDistribs;iC++)
	{
		vDistribs[iC] = std::vector<Hist>(iDims);
		for(iD=0;iD<iDims;iD++)
		{	//make sure to do +1 for dimension indices in DataStack
			vDistribs[iC][iD].Init(DataStack.GetMin(iD+1),DataStack.GetMax(iD+1),iBins);
		}
	}
	
	int iV = 0;
	for(iV=0;iV<vClustIDs.size();iV++)
	{	
		for(iD=0;iD<iDims;iD++)
		{
			//cluster spike belongs to
			vDistribs[vClustIDs[iV]][iD].IncBin(pBinData[iV][iD]);

			//FULL distribution containing all spikes!!
			vDistribs[iDistribs][iD].IncBin(pBinData[iV][iD]);
		}
	}
}

bool Distribs2Matlab(vector< vector< Hist > >& vDistribs, char* fname_base)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	int iDims = vDistribs[1].size();

	int iC=1,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	for(iC=1;iC<iClusts;iC++)
	{
		char fname[1024];
		sprintf(fname,"%d_bins__clust%d__%s___.txt",iBins,iC,fname_base);
		FILE* fp = fopen(fname,"w");
		if(!fp) return false;
		int xpos = 0,ypos = 0;
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
				fprintf(fp,"%lf " ,vDistribs[iC][iD].BinProb(iB));
			fprintf(fp,"\n");
		}
		fclose(fp);
	}

	return true;
}

bool Distribs2Images(vector< vector< Hist > >& vDistribs, char* fname_base)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	int iDims = vDistribs[1].size();

	int iC=1,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	int iMaxCount = 0;
	for(iC=1;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<vDistribs[iC][iD].NumBins();iB++)
			{
				if(vDistribs[iC][iD][iB] > iMaxCount)
				{
					iMaxCount = vDistribs[iC][iD][iB];
				}
			}
		}
	}

	int iInterDim = 20 , iBinWidth = 10;
	int iH = 600;
	int iW = iBinWidth * iBins * iDims + iInterDim * iDims;

	prob_t dScale = (iH - 1) * (1.0 / iMaxCount);

	color red(255,0,0) , green(0,255,0), blue(0,0,255), black(0,0,0), white(255,255,255);

	for(iC=1;iC<iClusts;iC++)
	{
		ppmImage oImg( iW, iH);
		oImg.setWhite();
		char fname[1024];
		sprintf(fname,"%s_%d_.ppm",fname_base,iC);
		int xpos = 0,ypos = 0;
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
			{
				int xmin = xpos;
				int xmax = xpos + iBinWidth;
				int ymin = iH - 1;
				int ymax = (iH - 1) - ( vDistribs[iC][iD][iB] / iMaxCount) * (iH - 1);

				int x,y;
				for(y=ymax;y<=ymin;y++)
					for(x=xmin;x<xmax;x++)
						oImg[y][x] = red;

				xpos += iBinWidth;
			}
			xpos += iInterDim;
		}
		oImg >> fname;
	}

	return true;
}

bool PrintDistribs2(vector< vector< Hist> >& vDistribs, char* fname)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	FILE* fp = fopen(fname,"w");

	if(!fp) return false;

	int iDims = vDistribs[0].size();

	int iC=0,iD=0,iB=0;

	int iBins = vDistribs[iC][iD].NumBins();

	int iMaxCount = 0;
	for(iC=0;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<vDistribs[iC][iD].NumBins();iB++)
			{
				if(vDistribs[iC][iD][iB] > iMaxCount)
				{
					iMaxCount = vDistribs[iC][iD][iB];
				}
			}
		}
	}

	vector< vector<char> > varr((iDims+1) * iBins);

	for(iC=0;iC<varr.size();iC++)
	{
		varr[iC].resize(iMaxCount);
		for(iD=0;iD<iMaxCount;iD++)
		{
			varr[iC][iD]='_';
		}
	}

	for(iC=0;iC<iClusts;iC++)
	{
		for(iD=0;iD<iDims;iD++)
		{
			for(iB=0;iB<iBins;iB++)
			{
				int k;
				for(k=0;k<vDistribs[iC][iD][iB];k++)
				{
					if(varr[iD][iB]=='_')
					{
						varr[iD][iB]=iC;
					}
				}
			}
		}
	}

	for(iD=0;iD<iDims;iD++)
	{
		fprintf(fp,"D%d\n",iD);
		for(iB=0;iB<iBins;iB++)
		{
			int k;
			for(k=0;k<iMaxCount;k++)
			{
				fprintf(fp,"%c",varr[iD][iB]);
			}			
		}
		//fprint
	}

	fclose(fp);

	return true;
}

bool PrintDistribs(vector<vector< Hist> >& vDistribs,char* fname)
{
	int iClusts = vDistribs.size();

	if(iClusts < 1) return false;

	FILE* fp = fopen(fname,"w");
	
	if(!fp) return false;

	int iDims = vDistribs[0].size();

	int iC = 0, iD = 0;

	for(iC=0;iC<iClusts;iC++)
	{
		fprintf(fp,"C%d\n",iC);
		for(iD=0;iD<iDims;iD++)
		{
			fprintf(fp,"D%d\n",iD);
			vDistribs[iC][iD].Print(fp);
		}
		fprintf(fp,"\n");
	}

	fclose(fp);

	return true;
}

#define giBins 4
int pBins[giBins] = {10,20,30,40};//,50,60,70,80,90,100};

CString GetClusterInfoString(CVerxStack& MainDataStack,CCluster& MainClusters,HWND wnd)
{
	//this func only called on user data when saving .cl file
	MainDataStack.whichDraw = CLUST_USER;

	//create info gain string for
	//multidimensional continuous probability distribution information gain
	//using resistor average of KL-divergence between points in a cluster and
	//all other points as background distribution
	CString strInfo( "%%BEGIN CLUSTER_INFORMATION_GAIN\n// %%InformationGain.0 ( ClusterId InfoRKLD )\n");
	
	//calculate cluster info gain for each cluster
	if(MainClusters.CalcClusterInfo(MainDataStack,true,wnd))
	{
		unsigned int iC=0;
		const int which = CLUST_USER;
		//go through all clusters (last one is FULL distribution so doesn't need to be saved to string)
		for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vInfo[which].size();iC++)
		{	CString strTmp;
			strTmp.Format("%%InformationGain.0 ( %d ",iC);
			strInfo += strTmp;
			strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][0]); //unweighted kldiv
			strInfo += strTmp;
			strInfo += " )\n";
		}
	}
	else
		MessageBox(0,"Didn't calculate cluster info gain!","WClust - error",MB_ICONINFORMATION);

	strInfo += "%%END CLUSTER_INFORMATION_GAIN\n\n";
	
	return strInfo;
}

static vector< vector<float> > gvprobs;
void InitProbs(int iMaxNumElems)
{
	if(gvprobs.size()>=iMaxNumElems+1)return;
	gvprobs = vector< vector<float> >(iMaxNumElems+1);
	int i,j;
	gvprobs[0] = vector<prob_t>(1);
	gvprobs[0][0] = 0.0;
	for(i=1;i<=iMaxNumElems;i++)
	{
		gvprobs[i] = vector<prob_t>(i+1);
		for(j=0;j<=i;j++)
		{
			gvprobs[i][j] = (prob_t) j / (prob_t) i;
		}
	}
}
float Prob(int iElems,int i)
{
	if(iElems >= gvprobs.size() || i >= gvprobs[iElems].size())
	{
		InitProbs(iElems);
		if(iElems >= gvprobs.size() || i >= gvprobs[iElems].size())
		{
			return (float) i / (float) iElems;
		}
	}
	return gvprobs[iElems][i];
}

ProbInitFree::ProbInitFree(int i)
{
	InitProbs(i);
}

ProbInitFree::~ProbInitFree()
{
	gvprobs.clear();
}
@


1.5
log
@getclusterinfostring only uses CLUST_USER, use probinitfree to init/free probability lookup tables, allow release mode to check size of prob lookup tables to prevent index out of bounds
@
text
@d1 1
a1 1
// $Id: Hist.cpp,v 1.4 2008/02/02 02:49:18 samn Exp $ 
d376 1
a376 1
			strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][0]);
d427 1
a427 1
}@


1.4
log
@check if cluster info gain computed properly and display error message if not
@
text
@d1 1
a1 1
// $Id$ 
d357 3
d382 1
a382 1
		MessageBox(0,"Couldn't calculate cluster info gain!","WClust - error",MB_ICONERROR);
d392 1
d410 7
a416 11
		char msg[1024];
		sprintf(msg,"index out of bounds in Prob iElems=%d gvprobs.size()=%d i=%d gvprobs[iElems].size()=%d",iElems,gvprobs.size(),i,gvprobs[iElems].size());
		MessageBox(0,msg,"WClust",MB_ICONERROR);
	}
#ifdef _DEBUG
	if(iElems < gvprobs.size() && i < gvprobs[iElems].size())
#endif
		return gvprobs[iElems][i];
#ifdef _DEBUG
	return (float) i / (float) iElems;
#endif
d419 9
@


1.3
log
@pass HWND to GetClusterInfoString so can pass to CIThread
@
text
@a356 3
	//calculate cluster info gain for each cluster
	MainClusters.CalcClusterInfo(MainDataStack,true,wnd);

d363 14
a376 10
	unsigned int iC=0;
	const int which = CLUST_USER;
	//go through all clusters (last one is FULL distribution so doesn't need to be saved to string)
	for(iC=1;iC<MainClusters.GetCount() && iC<MainClusters.m_vInfo[which].size();iC++)
	{	CString strTmp;
		strTmp.Format("%%InformationGain.0 ( %d ",iC);
		strInfo += strTmp;
		strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][0]);
		strInfo += strTmp;
		strInfo += " )\n";
d378 3
@


1.2
log
@cleaned up, only save continuous symmetric kldiv as cluster info gain to .cl output file
@
text
@d355 1
a355 1
CString GetClusterInfoString(CVerxStack& MainDataStack,CCluster& MainClusters)
d358 1
a358 1
	MainClusters.CalcClusterInfo(MainDataStack,true);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d357 1
a357 3
	CString strInfo,strTmp;

	//calculate cluster I,UD,E,EX info gain for each of # of bins and clusters
d360 6
a365 79
	char cTmp[1024]={0};

	//create info gain string
	strInfo += "%%BEGIN CLUSTER_INFORMATION_GAIN\n";

	int iNumBins = 10, iBinInc = 20 , iMaxBins = 210, idx = 0, iOff = 0;
	strInfo.Format("// %%InformationGain.0 ( ClusterId ");

	CString strTmpI,strTmpIN,strTmpUD,strTmpUDN,strTmpEX,strTmpEXN,strTmpEntropy,strTmpEntropyN;
	for(iNumBins=10;iNumBins<=iMaxBins;iNumBins+=iBinInc)
	{
		strTmp.Format("%dbinInfoI ",iNumBins);
		strTmpI += strTmp;

		strTmp.Format("%dbinInfoIN ",iNumBins);
		strTmpIN += strTmp;

		strTmp.Format("%dbinInfoUD ",iNumBins);
		strTmpUD += strTmp;

		strTmp.Format("%dbinInfoUDN ",iNumBins);
		strTmpUDN += strTmp;

		strTmp.Format("%dbinEntropy ",iNumBins);
		strTmpEntropy += strTmp;

		strTmp.Format("%dbinEntropyN ",iNumBins);
		strTmpEntropyN += strTmp;

		strTmp.Format("%dbinInfoEX ",iNumBins);
		strTmpEX += strTmp;

		strTmp.Format("%dbinInfoEXN ",iNumBins);
		strTmpEXN += strTmp;
	}

	//multidimensional probability distribution information gain
	int MultiBins[4] = {3,5,10,15};
	int iB = 0;
	CString strTmpMI,strTmpMIN,strTmpMUD,strTmpMUDN,strTmpME,strTmpMEN;
	for(iB=0;iB<4;iB++)
	{
		strTmp.Format("%dbinInfoMI ",MultiBins[iB]);
		strTmpMI += strTmp;

		strTmp.Format("%dbinInfoMIN ",MultiBins[iB]);
		strTmpMIN += strTmp;

		strTmp.Format("%dbinInfoMUD ",MultiBins[iB]);
		strTmpMUD += strTmp;

		strTmp.Format("%dbinInfoMUDN ",MultiBins[iB]);
		strTmpMUDN += strTmp;

		strTmp.Format("%dbinInfoME ",MultiBins[iB]);
		strTmpME += strTmp;

		strTmp.Format("%dbinInfoMEN ",MultiBins[iB]);
		strTmpMEN += strTmp;
	}

	strInfo += strTmpI;
	strInfo += strTmpIN;
	strInfo += strTmpUD;
	strInfo += strTmpUDN;
	strInfo += strTmpEntropy;
	strInfo += strTmpEntropyN;
	strInfo += strTmpEX;
	strInfo += strTmpEXN;

	strInfo += strTmpMI;
	strInfo += strTmpMIN;
	strInfo += strTmpMUD;
	strInfo += strTmpMUDN;
	strInfo += strTmpME;
	strInfo += strTmpMEN;

	strInfo += ")\n";

d370 1
a370 1
	{
d373 2
a374 25

		idx = iOff = 0;

		for(idx=0;idx<8;idx++)
		{
			iOff = idx;
			for(iNumBins=10;iNumBins<=iMaxBins;iNumBins+=iBinInc,iOff+=8)
			{
				strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][iOff]);
				strInfo += strTmp;
			}
		}
		iOff -= (8-1);
		for(idx=0;idx<6;idx++)
		{
			int iOff2 = iOff + idx;
			for(iB=0;iB<4;iB++,iOff2+=6)
			{
				if(idx>3)
					strTmp.Format("%.6f ",MainClusters.m_vInfo[which][iC][iOff2]);
				else
					strTmp.Format("%.2f ",MainClusters.m_vInfo[which][iC][iOff2]);
				strInfo += strTmp;
			}
		}
@
