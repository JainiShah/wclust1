head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2008.07.24.18.47.51;	author samn;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.14.21.49.00;	author samn;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.05.18.22.23;	author samn;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.05.15.05.04;	author samn;	state Exp;
branches;
next	;


desc
@""
@


1.4
log
@change format
@
text
@// $Id: ScopedTimer.h,v 1.3 2008/04/14 21:49:00 samn Exp $ 
#pragma once

#include <windows.h>
#include <string>

#include "Log.h"

struct ScopedTimer
{
	DWORD S,E;
	std::string msg;

	ScopedTimer(char* c)
	{
		if(c) msg = c;
		S = GetTickCount();
	}

	~ScopedTimer()
	{
		E = GetTickCount();
		
		char msg2[1024];
		
		if(msg.length())
			sprintf(msg2,"%s time = %d",msg.c_str(),E-S);
		else
			sprintf(msg2,"time = %d",E-S);

		Write2Log(msg2);		
	}
};

struct MTimer
{
	int iCount;
	std::string msg;
	DWORD totalT;
	MTimer(char* c)
	{	iCount=0;
		if(c) msg=c;
		totalT=0;
	}
	void Count(DWORD T)
	{	iCount ++;
		totalT += T;
	}
	~MTimer()
	{
		if(iCount)
			Write2Log("%s MTimer calls=%d totalT=%d time/call=%g",msg.c_str(),iCount,totalT,(double)totalT/(double)iCount);
		else
			Write2Log("%s MTimer calls=0 totalT=0");
	}
};

struct TimerInc
{
	MTimer& _t;
	DWORD S;
	TimerInc(MTimer& t)
		:_t(t),
		S(GetTickCount())
	{
	}
	~TimerInc()
	{
		_t.Count(GetTickCount()-S);
	}
};
@


1.3
log
@added some more timers to time functions over a run
@
text
@d1 1
a1 1
// $Id: ScopedTimer.h,v 1.2 2008/03/05 18:22:23 samn Exp $ 
d52 1
a52 1
			Write2Log("%s MTimer calls=%d totalT=%d time/call=%.2f",msg.c_str(),iCount,totalT,(double)totalT/(double)iCount);
@


1.2
log
@ScopedTimer should use log instead of messagebox, started adding FuncTimer
@
text
@d1 71
a71 46
// $Id$ 
#pragma once

#include <windows.h>
#include <string>

#include "Log.h"

struct ScopedTimer
{
	DWORD S,E;
	std::string msg;

	ScopedTimer(char* c)
	{
		if(c) msg = c;
		S = GetTickCount();
	}

	~ScopedTimer()
	{
		E = GetTickCount();
		
		char msg2[1024];
		
		if(msg.length())
			sprintf(msg2,"%s time = %d",msg.c_str(),E-S);
		else
			sprintf(msg2,"time = %d",E-S);

		Write2Log(msg2);		
	}
};

/*struct FuncTimer
{
	int iCount;
	std::string msg;
	FunTimer(char* c)
	{	iCount=0;
		if(c) msg=c;
	}
	void Count(ScopedTimer& S)
	{	iCount += 
	}
};*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d7 2
d30 2
a31 2
		
		MessageBox(0,msg2,"WClust",MB_ICONINFORMATION);
d34 13
@
